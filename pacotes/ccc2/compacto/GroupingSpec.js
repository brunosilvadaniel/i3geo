def.type('pvc.data.GroupingSpec').init(function(levelSpecs,type,keyArgs){this.type=type||null;var ids=[];this.hasCompositeLevels=false;var dimNames=[];this.levels=def.query(levelSpecs||undefined).where(function(levelSpec){return levelSpec.dimensions.length>0}).select(function(levelSpec){ids.push(levelSpec.id);def.array.append(dimNames,levelSpec.dimensionNames());if(!this.hasCompositeLevels&&levelSpec.dimensions.length>1){this.hasCompositeLevels=true}levelSpec._setAccDimNames(dimNames.slice(0));return levelSpec},this).array();this._dimNames=dimNames;this.depth=this.levels.length;this.isSingleLevel=this.depth===1;this.isSingleDimension=this.isSingleLevel&&!this.hasCompositeLevels;this.firstDimension=this.depth>0?this.levels[0].dimensions[0]:null;this.flatteningMode=def.get(keyArgs,'flatteningMode')||null;this.flattenRootLabel=def.get(keyArgs,'flattenRootLabel')||'';this.id=(this.flatteningMode||'')+"##"+this.flattenRootLabel+"##"+ids.join('||')}).add({bind:function(type){this.type=type||def.fail.argumentRequired('type');this.levels.forEach(function(levelSpec){levelSpec.bind(type)})},dimensions:function(){return def.query(this.levels).selectMany(function(level){return level.dimensions})},dimensionNames:function(){return this._dimNames},view:function(complex){return complex.view(this.dimensionNames())},isDiscrete:function(){var d;return!this.isSingleDimension||(!!(d=this.firstDimension)&&d.type.isDiscrete)},firstDimensionType:function(){var d=this.firstDimension;return d&&d.type},firstDimensionName:function(){var dt=this.firstDimensionType();return dt&&dt.name},firstDimensionValueType:function(){var dt=this.firstDimensionType();return dt&&dt.valueType},isNull:function(){return!this.levels.length},ensure:function(keyArgs){var grouping=this,flatteningMode=def.get(keyArgs,'flatteningMode');if(flatteningMode){if(flatteningMode==='singleLevel'){return grouping.singleLevelGrouping(keyArgs)}var flattenRootLabel=def.get(keyArgs,'flattenRootLabel')||'';if(this.flatteningMode!==flatteningMode||(this.flattenRootLabel!==flattenRootLabel)){grouping=new pvc.data.GroupingSpec(grouping.levels,grouping.type,{flatteningMode:flatteningMode,flattenRootLabel:flattenRootLabel})}}if(def.get(keyArgs,'reverse',false)){grouping=grouping.reversed()}return grouping},singleLevelGrouping:function(keyArgs){var reverse=!!def.get(keyArgs,'reverse',false);if(this.isSingleLevel&&!reverse){return this}this._singleLevelGrouping||(this._singleLevelGrouping={});var singleLevel=this._singleLevelGrouping[reverse];if(!singleLevel){var dimSpecs=this.dimensions().select(function(dimSpec){return reverse?new pvc.data.GroupingDimensionSpec(dimSpec.name,!dimSpec.reverse,dimSpec.type.complexType):dimSpec});var levelSpec=new pvc.data.GroupingLevelSpec(dimSpecs,this.type);singleLevel=new pvc.data.GroupingSpec([levelSpec],this.type,{flatteningMode:this.flatteningMode});this._singleLevelGrouping[reverse]=singleLevel}return singleLevel},reversed:function(){var reverseGrouping=this._reverseGrouping;if(!reverseGrouping){var levelSpecs=def.query(this.levels).select(function(levelSpec){var dimSpecs=def.query(levelSpec.dimensions).select(function(dimSpec){return new pvc.data.GroupingDimensionSpec(dimSpec.name,!dimSpec.reverse,dimSpec.type.complexType)});return new pvc.data.GroupingLevelSpec(dimSpecs,this.type)});reverseGrouping=new pvc.data.GroupingSpec(levelSpecs,this.type,{flatteningMode:this.flatteningMode});this._reverseGrouping=reverseGrouping}return reverseGrouping},toString:function(){return def.query(this.levels).select(function(level){return''+level}).array().join(', ')}});def.type('pvc.data.GroupingLevelSpec').init(function(dimSpecs,type){var ids=[];var dimNames=[];this.dimensions=def.query(dimSpecs).select(function(dimSpec){ids.push(dimSpec.id);dimNames.push(dimSpec.name);return dimSpec}).array();this._dimNames=dimNames;this.dimensionsInDefOrder=this.dimensions.slice(0);if(type){this._sortDimensions(type)}this.id=ids.join(',');this.depth=this.dimensions.length;var me=this;this.comparer=function(a,b){return me.compare(a,b)}}).add({_sortDimensions:function(type){type.sortDimensionNames(this.dimensionsInDefOrder,function(d){return d.name})},_setAccDimNames:function(accDimNames){this._accDimNames=accDimNames},accDimensionNames:function(){return this._accDimNames},dimensionNames:function(){return this._dimNames},bind:function(type){this._sortDimensions(type);this.dimensions.forEach(function(dimSpec){dimSpec.bind(type)})},compare:function(a,b){for(var i=0,D=this.depth;i<D;i++){var result=this.dimensions[i].compareDatums(a,b);if(result!==0){return result}}return 0},key:function(datum){var key='';var atoms={};var datoms=datum.atoms;var dimNames=this._dimNames;var keySep=datum.owner.keySep;for(var i=0,D=this.depth;i<D;i++){var dimName=dimNames[i];var atom=datoms[dimName];atoms[dimName]=atom;if(!i){key=atom.key}else{key+=keySep+atom.key}}return{key:key,atoms:atoms,dimNames:dimNames}},toString:function(){return def.query(this.dimensions).select(function(dimSpec){return''+dimSpec}).array().join('|')}});def.type('pvc.data.GroupingDimensionSpec').init(function(name,reverse,type){this.name=name;this.reverse=!!reverse;this.id=this.name+":"+(this.reverse?'0':'1');if(type){this.bind(type)}}).add({type:null,comparer:null,bind:function(type){type||def.fail.argumentRequired('type');this.type=type.dimensions(this.name);this.comparer=this.type.atomComparer(this.reverse)},compareDatums:function(a,b){var result=this.comparer(a.atoms[this.name],b.atoms[this.name]);if(result!==0){return result}return 0},toString:function(){return this.name+(this.reverse?' desc':'')}});pvc.data.GroupingSpec.parse=function(specText,type){if(!specText){return new pvc.data.GroupingSpec(null,type)}var levels;if(def.array.is(specText)){levels=specText}else if(def.string.is(specText)){levels=specText.split(/\s*,\s*/)}var levelSpecs=def.query(levels).select(function(levelText){var dimSpecs=groupSpec_parseGroupingLevel(levelText,type);return new pvc.data.GroupingLevelSpec(dimSpecs,type)});return new pvc.data.GroupingSpec(levelSpecs,type)};var groupSpec_matchDimSpec=/^\s*(.+?)(?:\s+(asc|desc))?\s*$/i;function groupSpec_parseGroupingLevel(groupLevelText,type){def.string.is(groupLevelText)||def.fail.argumentInvalid('groupLevelText',"Invalid grouping specification.");return def.query(groupLevelText.split(/\s*\|\s*/)).where(def.truthy).select(function(dimSpecText){var match=groupSpec_matchDimSpec.exec(dimSpecText)||def.fail.argumentInvalid('groupLevelText',"Invalid grouping level syntax '{0}'.",[dimSpecText]),name=match[1],order=(match[2]||'').toLowerCase(),reverse=order==='desc';return new pvc.data.GroupingDimensionSpec(name,reverse,type)})}