var complex_nextId=1;def.type('pvc.data.Complex').init(function(source,atomsByName,dimNames,atomsBase,wantLabel,calculate){this.id=complex_nextId++;var owner;if(source){owner=source.owner;if(!atomsBase){atomsBase=source.atoms}}this.owner=owner||this;this.atoms=atomsBase?Object.create(atomsBase):{};var hadDimNames=!!dimNames;if(!dimNames){dimNames=owner.type._dimsNames}var atomsMap=this.atoms;var D=dimNames.length;var i,dimName;if(atomsByName){var ownerDims=owner._dimensions;var addAtom=function(dimName,value){if(value!=null){var dimension=def.getOwn(ownerDims,dimName);var atom=dimension.intern(value);if(!atomsBase||atom!==atomsBase[dimName]){atomsMap[dimName]=atom}}};if(!hadDimNames){for(dimName in atomsByName){addAtom(dimName,atomsByName[dimName])}}else{for(i=0;i<D;i++){dimName=dimNames[i];addAtom(dimName,atomsByName[dimName])}}if(calculate){var newAtomsByName=owner.type._calculate(this);for(dimName in newAtomsByName){if(!def.hasOwnProp.call(atomsMap,dimName)){addAtom(dimName,newAtomsByName[dimName])}}}}if(!D){this.value=null;this.key='';if(wantLabel){this.label=""}}else if(D===1){var singleAtom=atomsMap[dimNames[0]];this.value=singleAtom.value;this.rawValue=singleAtom.rawValue;this.key=singleAtom.key;if(wantLabel){this.label=singleAtom.label}}else{var key,label;var labelSep=owner.labelSep;var keySep=owner.keySep;for(i=0;i<D;i++){dimName=dimNames[i];var atom=atomsMap[dimName];if(!i){key=atom.key}else{key+=keySep+atom.key}if(wantLabel){var atomLabel=atom.label;if(atomLabel){if(!label){label=atomLabel}else{label+=labelSep+atomLabel}}}}this.value=this.rawValue=this.key=key;if(wantLabel){this.label=label}}}).add({labelSep:" ~ ",keySep:',',label:null,rawValue:undefined,ensureLabel:function(){var label=this.label;if(label!=null){label="";var labelSep=this.owner.labelSep;def.eachOwn(this.atoms,function(atom){var alabel=atom.label;if(alabel){if(label){label+=labelSep+alabel}else{label=alabel}}});this.label=label}return label},view:function(dimNames){return new pvc.data.ComplexView(this,dimNames)},toString:function(){var s=[''+this.constructor.typeName];if(this.index!=null){s.push("#"+this.index)}this.owner.type.dimensionsNames().forEach(function(name){s.push(name+": "+pvc.stringify(this.atoms[name].value))},this);return s.join(" ")}});pvc.data.Complex.values=function(complex,dimNames){var atoms=complex.atoms;return dimNames.map(function(dimName){return atoms[dimName].value})};pvc.data.Complex.labels=function(complex,dimNames){var atoms=complex.atoms;return dimNames.map(function(dimName){return atoms[dimName].label})};